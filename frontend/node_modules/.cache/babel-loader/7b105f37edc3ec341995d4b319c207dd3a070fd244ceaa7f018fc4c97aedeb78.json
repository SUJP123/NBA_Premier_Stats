{"ast":null,"code":"var _jsxFileName = \"/Users/sujaypatel/Downloads/NBA_Priemer_Stats/frontend/src/pages/PastStats.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PastStats() {\n  _s();\n  const [season, setSeason] = useState(null);\n  const [seasonType, setSeasonType] = useState(null);\n  const [stat, setStat] = useState(null);\n  const [topPlayers, setTopPlayers] = useState([]);\n  const topFivePlayers = topPlayers.slice(0, 5);\n  const seasons = ['2014-15', '2015-16', '2016-17', '2017-18', '2018-19', '2019-20', '2020-21', '2021-22', '2022-23', '2023-24'];\n  const seasonTypes = [{\n    value: 'Regular%20Season',\n    label: 'Regular Season'\n  }, {\n    value: 'Playoffs',\n    label: 'Playoffs'\n  }];\n  const stats = ['Pts', 'Ast', 'Reb', 'Stl', 'Blk', 'Fg3Pct', 'FgPct', 'FtPct', 'Tov']; // Define available stats\n\n  useEffect(() => {\n    if (season && seasonType && stat) {\n      axios.get(`/api/historic/top${stat}?season=${season}&seasonType=${seasonType}`).then(response => {\n        setTopPlayers(response.data);\n      }).catch(() => {\n        console.log(\"Make sure each parameter is set\");\n      });\n    }\n  }, [season, seasonType, stat]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Select Season:\", /*#__PURE__*/_jsxDEV(\"select\", {\n        value: season,\n        onChange: e => setSeason(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select a season\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }, this), seasons.map(season => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: season,\n          children: season\n        }, season, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Select Season Type:\", /*#__PURE__*/_jsxDEV(\"select\", {\n        value: seasonType,\n        onChange: e => setSeasonType(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select a season type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this), seasonTypes.map(type => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: type.value,\n          children: type.label\n        }, type.value, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Select Stat:\", /*#__PURE__*/_jsxDEV(\"select\", {\n        value: stat,\n        onChange: e => setStat(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select a stat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this), stats.map(stat => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: stat,\n          children: stat\n        }, stat, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Top 5 Players for \", stat, \" in the \", season, \" (\", seasonType.replace('%20', ' '), \"):\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), topFivePlayers.map(), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [stat, \": \", topPlayer[stat.toLowerCase()]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n}\n_s(PastStats, \"M4B1ewo/9mXS1CglEcQL25jziBU=\");\n_c = PastStats;\nvar _c;\n$RefreshReg$(_c, \"PastStats\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","PastStats","_s","season","setSeason","seasonType","setSeasonType","stat","setStat","topPlayers","setTopPlayers","topFivePlayers","slice","seasons","seasonTypes","value","label","stats","get","then","response","data","catch","console","log","children","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","map","type","replace","topPlayer","toLowerCase","_c","$RefreshReg$"],"sources":["/Users/sujaypatel/Downloads/NBA_Priemer_Stats/frontend/src/pages/PastStats.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\n\n\nfunction PastStats() {\n    const [season, setSeason] = useState(null);\n    const [seasonType, setSeasonType] = useState(null);\n    const [stat, setStat] = useState(null);\n    const [topPlayers, setTopPlayers] = useState([])\n    const topFivePlayers = topPlayers.slice(0, 5);\n\n    const seasons = ['2014-15', '2015-16', '2016-17', '2017-18', '2018-19', '2019-20', '2020-21', '2021-22', '2022-23', '2023-24'];\n    const seasonTypes = [\n        { value: 'Regular%20Season', label: 'Regular Season' },\n        { value: 'Playoffs', label: 'Playoffs' }\n    ];\n    const stats = ['Pts', 'Ast', 'Reb', 'Stl', 'Blk', 'Fg3Pct', 'FgPct', 'FtPct', 'Tov']; // Define available stats\n\n    useEffect( () => {\n            if (season && seasonType && stat) {\n                axios.get(`/api/historic/top${stat}?season=${season}&seasonType=${seasonType}`)\n                    .then(response => {setTopPlayers(response.data)})\n                    .catch(() => {console.log(\"Make sure each parameter is set\")})\n            }\n        },\n        [season, seasonType, stat]\n    );\n\n    return (\n        <div>\n            <label>\n                Select Season:\n                <select value={season} onChange={e => setSeason(e.target.value)}>\n                    <option value=\"\">Select a season</option>\n                    {seasons.map(season => (\n                        <option key={season} value={season}>\n                            {season}\n                        </option>\n                    ))}\n                </select>\n            </label>\n\n            <label>\n                Select Season Type:\n                <select value={seasonType} onChange={e => setSeasonType(e.target.value)}>\n                    <option value=\"\">Select a season type</option>\n                    {seasonTypes.map(type => (\n                        <option key={type.value} value={type.value}>\n                            {type.label}\n                        </option>\n                    ))}\n                </select>\n            </label>\n\n            <label>\n                Select Stat:\n                <select value={stat} onChange={e => setStat(e.target.value)}>\n                    <option value=\"\">Select a stat</option>\n                    {stats.map(stat => (\n                        <option key={stat} value={stat}>\n                            {stat}\n                        </option>\n                    ))}\n                </select>\n            </label>\n\n            <div>\n                <h2>Top 5 Players for {stat} in the {season} ({seasonType.replace('%20', ' ')}):</h2>\n                {topFivePlayers.map()}\n                <p>{stat}: {topPlayer[stat.toLowerCase()]}</p>\n            </div>\n        </div>\n\n    )\n\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}